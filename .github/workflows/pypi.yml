name: Deploy to PyPI

on: [push, pull_request]

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Build
        run: cargo build --release
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          rust-toolchain: nightly
          args: -i python --release --out dist --no-sdist
      - name: Install built wheel - x86_64
        run: |
          pip install py-bip39-bindings --no-index --find-links dist --force-reinstall
      - name: Build wheels - universal2
        if: ${{ matrix.python-version != '3.7' }}
        uses: messense/maturin-action@v1
        with:
          args: -i python --release --universal2 --out dist --no-sdist
          rust-toolchain: nightly
      - name: Install built wheel - universal2
        if: ${{ matrix.python-version != '3.7' }}
        run: |
          pip install py-bip39-bindings --no-index --find-links dist --force-reinstall
      - name: Python UnitTest
        run: |
          pip install pytest
          pytest tests.py
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Update rustup
        run: rustup self update
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
      - name: Build
        if: matrix.target == 'x64'
        run: cargo build --release
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: -i python --release --out dist --no-sdist
          rust-toolchain: nightly
      - name: Install built wheel
        run: |
          pip install py-bip39-bindings --no-index --find-links dist --force-reinstall
      - name: Python UnitTest
        run: |
          pip install pytest
          pytest tests.py
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          profile: minimal
          default: true
      - name: Build
        run: cargo build --release
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build Wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          rust-toolchain: nightly
          manylinux: auto
          args: -i python${{ matrix.python-version }} --release --out dist --no-sdist
      - name: Python UnitTest
        if: matrix.target == 'x86_64'
        run: |
          pip install py-bip39-bindings --no-index --find-links dist --force-reinstall
          # rm -rf py-bip39-bindings
          pip install pytest
          pytest tests.py
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  build muslwheels x86_64:
    name: Build wheels on x86_64
    runs-on: ubuntu-latest

    env:
      CIBW_BUILD_VERBOSITY: 1
      CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y"
      CIBW_BEFORE_BUILD: "pip3 install 'maturin>=0.10,<0.11'"
      CIBW_ARCHS_LINUX: "auto64"
      CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
      CIBW_BUILD: "*-musllinux_x86_64"
      CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* cp37-*"

    steps:
      - uses: actions/checkout@v3

      - name: add additional package
        run: sudo apt-get install patchelf

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.9.0

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

    build muslwheels aarch64:
      name: Build wheels on aarch64
      runs-on: ubuntu-latest

      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BEFORE_ALL_LINUX: "curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain nightly -y"
        CIBW_BEFORE_BUILD: "pip3 install 'maturin>=0.10,<0.11'"
        CIBW_ARCHS_LINUX: "aarch64"
        CIBW_ENVIRONMENT: 'PATH="$PATH:$HOME/.cargo/bin"'
        CIBW_BUILD: "*-musllinux_aarch64"
        CIBW_SKIP: "cp27-* cp34-* cp35-* cp36-* cp37-*"

      steps:
        - uses: actions/checkout@v3

        - name: add additional package
          run: sudo apt-get install patchelf

        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2
          with:
            platforms: all

        - name: Build wheels
          uses: pypa/cibuildwheel@v2.9.0
          with:
            output-dir: dist/wheels

        - uses: actions/upload-artifact@v3
          with:
            name: wheels
            path: dist